@page "/roles"
@inject RolesService RolesService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]

<h3>Roles</h3>

<div>
    <button class="btn btn-primary" @onclick="NavigateToAddRole">Add Role</button>
</div>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <RadzenDataGrid @ref="grid" Data="@roles" TItem="IdentityRole" ColumnWidth="200px" Class="mt-4  table-shadow" AllowSorting="true" AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Responsive="true" PageSize="3">
        <Columns>
            <RadzenDataGridColumn TItem="IdentityRole" Property="Id" Title="Id" />
            <RadzenDataGridColumn TItem="IdentityRole" Property="Name" Title="Role Name" />
            <RadzenDataGridColumn TItem="IdentityRole" Title="Actions">
                <Template Context="role">
                    <a class="btn btn-primary" href="roles/manage-permissions/@role.Id">Manage Permissions</a>
                    <a class="btn btn-secondary" href="roles/edit/@role.Id">Edit</a>
                    <button class="btn btn-danger" @onclick="() => DeleteRole(role.Id)">Delete</button>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
<style>
    .table-shadow {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden; /* Ensure the shadow doesn't affect the rounded corners */
    }

</style>
@code {
    private List<IdentityRole> roles;
    private bool isLoading;
    private RadzenDataGrid<IdentityRole> grid;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        roles = await RolesService.GetRolesAsync();
        isLoading = false;
    }

    private void NavigateToAddRole()
    {
        NavigationManager.NavigateTo("/roles/add");
    }

    private async Task DeleteRole(string roleId)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this role?");
        if (confirm)
        {
            await RolesService.DeleteRoleAsync(roleId);
            roles.RemoveAll(r => r.Id == roleId);
            await grid.Reload();
        }
    }
}
