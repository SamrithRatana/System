@page "/PrinterModel"
@using ServiceMaintenance.Contants
@using ServiceMaintenance.Filters.GlobalSecurity
@using ServiceMaintenance.Models
@using ServiceMaintenance.Services
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids

@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inherits PermissionBase


<DxToastProvider Name="Customization"
                 MaxToastCount="5"
                 HorizontalAlignment="HorizontalAlignment.Right"
                 VerticalAlignment="VerticalEdge.Top"
                 AnimationType="@Animation" />
<DxToastProvider Name="Error"
                 MaxToastCount="5"
                 HorizontalAlignment="HorizontalAlignment.Right"
                 VerticalAlignment="VerticalEdge.Top"
                 AnimationType="@Animation" />

<div class="card shadow-sm rounded-lg">
    <div class="card-body">
        <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
            @if (CanCreate)
            {
            <DxToolbarItem Text="New" Click="NewItem_Click" CssClass="toolbar-item" />
            }
             @if (CanEdit)
            {
            <DxToolbarItem Text="Edit" Click="EditItem_Click" CssClass="toolbar-item" />
            }
             @if (CanDelete)
            {
            <DxToolbarItem Text="Delete" Click="DeleteItem_Click" CssClass="toolbar-item" />
             }
            <DxToolbarItem Text="Print Report" Click="PrintReport_Click" CssClass="toolbar-item" />
        </DxToolbar>
    </div>
</div>

 
   




<DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall" @bind-IsActive="@isXSmallScreen" />
<hr>

<div class="h-100 grid-wrapper">
    @if (printerModels == null)
    {
        <div class="card-body w-100">
            <div class="card-header border-0 p-2 rounded">
                <DxLoadingPanel IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                                CssClass="w-100"
                                IndicatorVisible="@indicatorVisible"
                                IndicatorAreaVisible="@indicatorAreaVisible"
                                Visible="true"
                                Text="Processing..."
                                TextAlignment="LoadingPanelTextAlignment.Right">
                    <div style="min-height: 250px;"></div>
                </DxLoadingPanel>
            </div>
        </div>
    }
    else
    {
        <SfGrid @ref="MyGrid"
                DataSource="@printerModels"
                AllowPaging="true"
                AllowSorting="true"
                AllowExcelExport="true"
                AllowPdfExport="true"
                OnRowSelected="RowSelectHandler"
                OnActionBegin="ActionBeginHandler"
                Toolbar=@ToolbarItems
                >

            <GridEvents RowSelected="RowSelectHandler" OnToolbarClick="ToolbarClickHandler" TValue="PrinterModel"></GridEvents>
            <GridPageSettings PageSize="5"></GridPageSettings>

            <GridColumns>
                <GridColumn Field="PrinterModelID" HeaderText="ID" Width="50" IsPrimaryKey="true" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Visible="false"></GridColumn>
                <GridColumn Field="Photo" HeaderText="Photo" Width="150">
                    <Template>
                        @{
                            var item = context as PrinterModel;
                        }
                        <img src="@item.Photo" alt="Logo" width="100" />
                    </Template>
                </GridColumn>
               
                <GridColumn Field="ModelName" HeaderText="Model Name" Width="150"></GridColumn>
                <GridColumn Field="Description" HeaderText="Description" Width="200"></GridColumn>
                <GridColumn HeaderText="Actions" Width="120">
                    <Template>
                        @{
                            var item = context as PrinterModel;
                        }
                        <DxButton IconCssClass="fas fa-eye" CssClass="icon-button info" RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="ButtonRenderStyleMode.Text" Click="() => ShowInfo(item)" />
                        <DxButton IconCssClass="fas fa-file-invoice" CssClass="icon-button secondary" RenderStyle="ButtonRenderStyle.Secondary" RenderStyleMode="ButtonRenderStyleMode.Text" Click="PrintReport_Click" />
                        <DxButton IconCssClass="fas fa-trash-alt" CssClass="icon-button danger" RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="ButtonRenderStyleMode.Text" Click="() => ConfirmDelete(item)" />
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>

        <SfDialog @ref="DialogDelete" IsModal="true" Width="250px" ShowCloseIcon="true" Visible="false">
            <DialogTemplates>
                <Header> Confirm Delete </Header>
                <Content> Please confirm that you want to delete this record </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Delete" IsPrimary="true" OnClick="ConfirmDeleteYes" />
                <DialogButton Content="Cancel" IsPrimary="false" OnClick="ConfirmDeleteNo" />
            </DialogButtons>
        </SfDialog>

        <SfDialog @ref="DialogNoRecordSelected" IsModal="true" Width="250px" ShowCloseIcon="true" Visible="false">
            <DialogTemplates>
                <Header> Warning! </Header>
                <Content> You must select a record </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="OK" IsPrimary="true" OnClick="CloseDialogNoRecordSelected" />
            </DialogButtons>
        </SfDialog>

        <!-- Add/Edit Dialog -->
        <SfDialog IsModal="true" Width="500px" ShowCloseIcon="true" Visible="@isAddDialogVisible">
            <DialogTemplates>
                <Header>
                    <div class="dialog-header">
                        <h2>@pageTitle</h2>
                    </div>
                </Header>
            </DialogTemplates>

            <EditForm Model="@printerModel" OnValidSubmit="@SaveModel">
                <div class="form-group">
                    <h2 class="image-title">Image Upload</h2>
                    <div class="image-container">
                        @if (!string.IsNullOrEmpty(printerModel.Photo))
                        {
                            <img src="@printerModel.Photo" alt="Printer Model Image" />
                            <div class="image-filename">@Path.GetFileName(printerModel.Photo)</div>
                        }
                        else
                        {
                            <img src="images/default-image.jpg" alt="Default Image" class="default-image" />
                            <p>No image available. <br />Upload or browse an image.</p>
                        }

                        <div class="file-upload-overlay">
                            <InputFile OnChange="HandleFileSelected" />
                            <label for="file-upload" class="file-upload-label">Choose File</label>
                        </div>
                    </div>

                    <SfTextBox Enabled="false" Placeholder="Image File Name" FloatLabelType="@FloatLabelType.Always" Value="@Path.GetFileName(printerModel.Photo)"></SfTextBox>
                    <SfTextBox Enabled="true" Placeholder="Model Name" FloatLabelType="@FloatLabelType.Always" @bind-Value="printerModel.ModelName"></SfTextBox>
                    <SfTextBox Enabled="true" Placeholder="Description" FloatLabelType="@FloatLabelType.Always" @bind-Value="printerModel.Description"></SfTextBox>
                </div>

                <div class="e-footer-content">
                    <div class="button-container">
                        <button type="submit" class="e-btn e-normal e-primary">Save</button>
                        <button type="button" class="e-btn e-normal" @onclick="CancelDialog">Cancel</button>
                    </div>
                </div>
            </EditForm>
        </SfDialog>
    }
</div>

@code {
    private SfGrid<PrinterModel> MyGrid;
    private SfDialog DialogDelete;
    private SfDialog DialogNoRecordSelected;
    private int? printerModelID;
    private bool isAddDialogVisible = false;
    private string pageTitle = "Add Model"; // Title for the Add dialog
    public List<string> ToolbarItems = new List<string>() { "Search" };
    public IEnumerable<PrinterModel> printerModels { get; set; }
    private PrinterModel printerModel = new PrinterModel(); // New instance for Add
    ToastAnimationType Animation { get; set; } = ToastAnimationType.Slide;

    [Inject]
    public IPrinterModelService ModelService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    bool indicatorVisible = false;
    bool indicatorAreaVisible = true;
    bool isXSmallScreen;    
    private Dictionary<string, bool> permissions = new Dictionary<string, bool>();

  
    protected override async Task OnInitializedAsync()
     {

       
      await base.OnInitializedAsync();

    
         var query = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;
         var idQuery = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(query).TryGetValue("id", out var idValue);
         if (idQuery && int.TryParse(idValue, out var id))
         {
             printerModelID = id;
             if (printerModelID > 0)
             {
                 printerModel = await ModelService.GetData(printerModelID.Value);
             }
         }
         else
         {
             printerModel = new PrinterModel(); // Initialize for Add operation
         }

         printerModels = await ModelService.GetData();
     }

  
   
    public void ToolbarClickHandler(ClickEventArgs args)
    {
        if (args.Item.Text == "Add")
        {
            printerModel = new PrinterModel(); // Reset model for adding
            printerModelID = 0;
            pageTitle = "Add Model"; // Set the title for adding
            isAddDialogVisible = true;
            StateHasChanged(); // To update the UI
        }
        else if (args.Item.Text == "Edit")
        {
            if (printerModelID.HasValue)
            {
                pageTitle = "Edit Model"; // Set the title for editing
                printerModel = printerModels.FirstOrDefault(p => p.PrinterModelID == printerModelID);
                isAddDialogVisible = true;
                StateHasChanged(); // To update the UI
            }
            else
            {
                DialogNoRecordSelected.ShowAsync();
            }
        }
        else if (args.Item.Text == "Delete")
        {
            if (printerModelID.HasValue)
            {
                DialogDelete.ShowAsync();
            }
            else
            {
                DialogNoRecordSelected.ShowAsync();
            }
        }
    }

    private void NewItem_Click()
    {
        printerModel = new PrinterModel(); // Reset model for adding
        printerModelID = 0; // Indicates an add operation
        pageTitle = "Add PrinterModel"; // Set the title for adding
        isAddDialogVisible = true;
        StateHasChanged(); // To update the UI
    }

    private void EditItem_Click()
    {
        if (printerModelID.HasValue && printerModelID > 0) // Ensure an ID is selected
        {
            pageTitle = "Edit PrinterModel "; // Set the title for editing
            printerModel = printerModels.FirstOrDefault(p => p.PrinterModelID == printerModelID);
            if (printerModel == null)
            {
                // Handle the case where the sparePartID does not exist in the list
                printerModelID = 0;
                DialogNoRecordSelected.ShowAsync();
                return;
            }
            isAddDialogVisible = true;
            StateHasChanged(); // To update the UI
        }
        else
        {
            DialogNoRecordSelected.ShowAsync();
        }
    }

    private void DeleteItem_Click()
    {
        if (printerModelID.HasValue && printerModelID > 0) // Ensure an ID is selected
        {
            DialogDelete.ShowAsync();
        }
        else
        {
            DialogNoRecordSelected.ShowAsync();
        }
    }

    

    public async void ConfirmDeleteYes()
    {
        if (printerModelID.HasValue)
        {
            await ModelService.DeleteData(printerModelID.Value);
            await DialogDelete.HideAsync();
            printerModels = await ModelService.GetData();
            StateHasChanged();

        }
    }

    public void ShowInfo(PrinterModel item)
    {
        if (item != null)
        {
            NavigationManager.NavigateTo($"detail/{item.PrinterModelID}");
        }
    }


    private void PrintReport_Click()
    {
        // Implement the logic to print the report
    }

    private void ConfirmDelete(PrinterModel item)
    {
        printerModelID = item.PrinterModelID;
        DialogDelete.ShowAsync();
    }
    private async void ConfirmDeleteNo()
    {
        await DialogDelete.HideAsync();
    }

    private void CloseDialogNoRecordSelected()
    {
        DialogNoRecordSelected.HideAsync();
    }

    private void CancelDialog()
    {
        isAddDialogVisible = false;
        StateHasChanged(); // To update the UI
    }

    private void RowSelectHandler(RowSelectEventArgs<PrinterModel> args)
    {
        printerModelID = args.Data.PrinterModelID;
    }

    private async Task SaveModel()
    {
        // Handle save logic
        if (printerModelID == 0) // Add operation
        {
            await ModelService.CreateData(printerModel);
        }
        else // Edit operation
        {
            await ModelService.UpdateData(printerModel);
        }

        isAddDialogVisible = false;
        printerModels = await ModelService.GetData(); // Refresh grid data
        StateHasChanged(); // To update the UI
    }


    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var uploadsFolder = Path.Combine("wwwroot", "images", "printermodels");
            var uniqueFileName = Guid.NewGuid().ToString() + "_" + file.Name;
            var filePath = Path.Combine(uploadsFolder, uniqueFileName);

            if (!Directory.Exists(uploadsFolder))
            {
                Directory.CreateDirectory(uploadsFolder);
            }

            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(stream);
            }

            printerModel.Photo = Path.Combine("images", "printermodels", uniqueFileName).Replace("\\", "/");
        }
    }

}


    <style >
    /* Overall card styling */
    .card {
        border: none;
        border-radius: 8px; /* Slightly rounded corners */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow */
        margin-bottom: 20px; /* Add some space below the card */
    }

    /* Toolbar button styles */
    .toolbar-item {
        margin: 0 4px; /* Reduced spacing between toolbar items */
        font-size: 14px; /* Smaller font size */
        border-radius: 4px; /* Rounded corners */
        height: 36px; /* Reduced height */
        line-height: 36px; /* Align text vertically */
        padding: 0 8px; /* Reduced padding */
        transition: background-color 0.3s ease, color 0.3s ease; /* Smooth color transitions */
    }

        .toolbar-item:hover {
            background-color: #f8f9fa; /* Light background on hover */
        }

    .form-group {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
    }

    .image-container {
        grid-column: span 2;
        position: relative;
        text-align: center;
    }

        .image-container img {
            max-width: 60%;
            height: auto;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .image-filename {
        position: absolute;
        bottom: 8px;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 5px 10px;
        border-radius: 5px;
        opacity: 0;
        transition: opacity 0.3s ease;
        pointer-events: none;
    }

    .image-container:hover .image-filename {
        opacity: 1;
    }

    .default-image {
        max-width: 100%;
        height: auto;
        border: 2px dashed #ccc;
        border-radius: 8px;
        padding: 1rem;
    }

    .file-upload-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

        .file-upload-overlay input[type="file"] {
            width: 100%;
            height: 100%;
            cursor: pointer;
            opacity: 0;
        }

        .file-upload-overlay:hover {
            opacity: 1;
            background: rgba(0, 0, 0, 0.4);
        }

    .file-upload-label {
        color: white;
        background-color: rgba(0, 0, 0, 0.5);
        padding: 0.5rem 1rem;
        border-radius: 5px;
        cursor: pointer;
    }

    .e-footer-content {
        grid-column: span 2;
        display: flex;
        justify-content: flex-end;
        margin-top: 1rem;
    }

    .button-container {
        display: flex;
        gap: 0.5rem;
    }


</style>
