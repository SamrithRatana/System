
@page "/itemModel"
@using Microsoft.AspNetCore.SignalR.Client
@using Syncfusion.Blazor.Grids
@using ServiceMaintenance.Contants
@using ServiceMaintenance.Filters.GlobalSecurity
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@inject ItemService ItemService
@inject IToastNotificationService ToastNotificationService
@inherits PermissionBase
<DxToastProvider Name="Customization"
                 MaxToastCount="5"
                 HorizontalAlignment="HorizontalAlignment.Right"
                 VerticalAlignment="VerticalEdge.Top"
                 AnimationType="@Animation" />
<DxToastProvider Name="Error"
                 MaxToastCount="5"
                 HorizontalAlignment="HorizontalAlignment.Right"
                 VerticalAlignment="VerticalEdge.Top"
                 AnimationType="@Animation" />

<div class="card shadow-sm rounded-lg">
    <div class="card-body">
        <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
           @if (CanCreate)
            {
                <DxToolbarItem Text="New" Click="NewItem_Click" CssClass="toolbar-item" />
            }
           @if (CanEdit)
            {
                <DxToolbarItem Text="Edit" Click="EditItem_Click" CssClass="toolbar-item" />
            }
            @if (CanDelete)
            {
                <DxToolbarItem Text="Delete" Click="DeleteItem_Click" CssClass="toolbar-item" />
            }
            <DxToolbarItem Text="Print Report" Click="PrintReport_Click" CssClass="toolbar-item" />
        </DxToolbar>
    </div>
</div>

<hr>

<div class="h-100 grid-wrapper">
    @if (items == null)
    {
        <div class="card-body w-100">
            <div class="card-header border-0 p-2 rounded">
                <DxLoadingPanel IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                                CssClass="w-100"
                                IndicatorVisible="@indicatorVisible"
                                IndicatorAreaVisible="@indicatorAreaVisible"
                                Visible="true"
                                Text="Processing..."
                                TextAlignment="LoadingPanelTextAlignment.Right">
                    <div style="min-height: 250px;"></div>
                </DxLoadingPanel>
            </div>
        </div>
    }
    else
    {
        @if (CanView)
        {
            <SfGrid @ref="MyGrid"
                    DataSource="@items"
                    AllowPaging="true"
                    AllowSorting="true"
                    AllowExcelExport="true"
                    AllowPdfExport="true"
                    Toolbar="@ToolbarItems"
                    RowSelected="RowSelectHandler">

                <GridEvents RowSelected="RowSelectHandler" TValue="Repairs" />
                <GridPageSettings PageSize="5"></GridPageSettings>

                <GridColumns>
                    <GridColumn Field="Id" HeaderText="ID" Width="50" IsPrimaryKey="true" Visible="false"></GridColumn>
                    <GridColumn Field="ItemName" HeaderText="Item Name" Width="150"></GridColumn>
                    <GridColumn Field="SerialNumber" HeaderText="Serial Number" Width="150"></GridColumn>
                    <GridColumn Field="ItemType" HeaderText="Item Type" Width="150"></GridColumn>
                    <GridColumn HeaderText="Actions" Width="120">
                        <Template>
                            @{
                                var item = context as Repairs;
                            }
                            <DxButton IconCssClass="fas fa-eye" CssClass="icon-button info" RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="ButtonRenderStyleMode.Text" />
                            <DxButton IconCssClass="fas fa-file-invoice" CssClass="icon-button secondary" RenderStyle="ButtonRenderStyle.Secondary" RenderStyleMode="ButtonRenderStyleMode.Text" Click="PrintReport_Click" />
                            <DxButton IconCssClass="fas fa-trash-alt" CssClass="icon-button danger" RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="ButtonRenderStyleMode.Text" />
                        </Template>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        }


        <SfDialog @ref="DialogDelete" IsModal="true" Width="250px" ShowCloseIcon="true" Visible="false">
            <DialogTemplates>
                <Header> Confirm Delete </Header>
                <Content> Please confirm that you want to delete this record. </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Delete" IsPrimary="true" OnClick="ConfirmDeleteYes" />
                <DialogButton Content="Cancel" OnClick="ConfirmDeleteNo" />
            </DialogButtons>
        </SfDialog>

        <SfDialog @ref="DialogNoRecordSelected" IsModal="true" Width="250px" ShowCloseIcon="true" Visible="false">
            <DialogTemplates>
                <Header> Warning! </Header>
                <Content> You must select a record. </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="OK" IsPrimary="true" OnClick="CloseDialogNoRecordSelected" />
            </DialogButtons>
        </SfDialog>

        <SfDialog IsModal="true" Width="500px" ShowCloseIcon="true" Visible="@isAddDialogVisible">
            <DialogTemplates>
                <Header>
                    <div class="dialog-header">
                        <h2>@pageTitle</h2>
                    </div>
                </Header>
            </DialogTemplates>
            <EditForm Model="@currentItem" OnValidSubmit="SaveItem">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group row">
                    <div class="col-md-6">
                        <SfTextBox Placeholder="Item Name" FloatLabelType="FloatLabelType.Always" @bind-Value="currentItem.ItemName"></SfTextBox>
                    </div>
                    <div class="col-md-6">
                        <SfTextBox Placeholder="Serial Number" FloatLabelType="FloatLabelType.Always" @bind-Value="currentItem.SerialNumber"></SfTextBox>
                    </div>
                    <div class="col-md-6">
                        <SfComboBox TValue="string" Placeholder="Item Type" FloatLabelType="FloatLabelType.Always" TItem="Countries" @bind-Value="currentItem.ItemType" DataSource="@Country" Width="100%">
                            <ComboBoxFieldSettings Value="Name" Text="Name"></ComboBoxFieldSettings>
                        </SfComboBox>
                    </div>
                </div>
                <div class="e-footer-content">
                    <button type="submit" class="e-btn e-normal e-primary">Save</button>
                    <button type="button" class="e-btn e-normal" @onclick="CancelDialog">Cancel</button>
                </div>
            </EditForm>
        </SfDialog>
    }
</div>

@code {
    private SfGrid<Repairs> MyGrid;
    private SfDialog DialogDelete;
    private SfDialog DialogNoRecordSelected;
    private bool isAddDialogVisible = false;
    private string pageTitle = "Add Item";
    private Repairs currentItem = new Repairs();
    private IEnumerable<Repairs> items;
    private Guid? selectedItemId;
    bool indicatorVisible = false;
    bool indicatorAreaVisible = true;
    public string DropVal = "Please Select Type";
    private HubConnection hubConnection;
    ToastAnimationType Animation { get; set; } = ToastAnimationType.Slide;
    public List<string> ToolbarItems = new List<string> { "Search" };
    // Define the item types for the ComboBox


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // Fetch initial items from the service
        items = await ItemService.GetItemsAsync();

        // Establish SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/itemHub"))
            .Build();

        // Handle incoming data updates
        hubConnection.On<string>("ReceiveItemUpdate", async (message) =>
        {
            // Fetch updated items whenever SignalR broadcasts
            items = await ItemService.GetItemsAsync();
            await InvokeAsync(StateHasChanged);
        });
        // Handle item deletion event
        hubConnection.On<Guid>("BroadcastItemDelete", (deletedItemId) =>
        {
            // Remove the deleted item from the local item list
            items = items.Where(item => item.Id != deletedItemId).ToList();

            // Refresh the UI
            InvokeAsync(StateHasChanged);
        });
        // Start the SignalR connection
        await hubConnection.StartAsync();
    }

    public class Countries
    {
        public string Name { get; set; }

        public string Code { get; set; }
    }

    List<Countries> Country = new List<Countries>
    {
        new Countries() { Name = "Printer", Code = "AU" },
        new Countries() { Name = "Copier", Code = "BM" },
        new Countries() { Name = "Scanner", Code = "CA" },
        new Countries() { Name = "Bill Counter", Code = "CM" },
    };
    private void NewItem_Click()
    {
        currentItem = new Repairs();
        pageTitle = "Add Item";
        isAddDialogVisible = true;
    }

    private void EditItem_Click()
    {
        if (selectedItemId.HasValue)
        {
            currentItem = items.FirstOrDefault(i => i.Id == selectedItemId.Value);
            pageTitle = "Edit Item";
            isAddDialogVisible = true;
        }
        else
        {
            DialogNoRecordSelected.ShowAsync();
        }
    }

    private void DeleteItem_Click()
    {
        if (selectedItemId.HasValue)
        {
            DialogDelete.ShowAsync();
        }
        else
        {
            DialogNoRecordSelected.ShowAsync();
        }
    }

    private void PrintReport_Click()
    {
        // Handle print report logic
    }

    private void RowSelectHandler(RowSelectEventArgs<Repairs> args)
    {
        selectedItemId = args.Data.Id; // Now this will work since types match
    }

    private async Task SaveItem()
    {
        // Check if SerialNumber is unique
        if (items.Any(i => i.SerialNumber == currentItem.SerialNumber && i.Id != currentItem.Id))
        {
            AddToast();
            return; // Exit the method early if the serial number is not unique
        }

        // Check if it's a new item by comparing to Guid.Empty
        if (currentItem.Id == Guid.Empty)
        {
            await ItemService.CreateItemAsync(currentItem);
            await hubConnection.SendAsync("BroadcastItemUpdate", "ItemCreated");
        }
        else
        {
            await ItemService.UpdateItemAsync(currentItem);
            await hubConnection.SendAsync("BroadcastItemUpdate", "ItemUpdated");
        }

        isAddDialogVisible = false;
        items = await ItemService.GetItemsAsync(); // Refresh the data
    }



    private void CancelDialog()
    {
        isAddDialogVisible = false;
    }

    private async Task ConfirmDeleteYes()
    {
        if (selectedItemId.HasValue)
        {
            // Delete the item from the server-side database
            await ItemService.DeleteItemAsync(selectedItemId.Value);

            // Broadcast the delete event using SignalR to all connected clients
            await hubConnection.SendAsync("BroadcastItemDelete", selectedItemId.Value);

            // Refresh the data after deletion
            items = await ItemService.GetItemsAsync();

            // Show a toast notification to confirm success
            ToastNotificationService.ShowToast(new ToastOptions
                {
                    ProviderName = "Customization",
                    Title = "Success",
                    Text = "Item deleted successfully",
                    ThemeMode = ToastThemeMode.Pastel,
                    RenderStyle = ToastRenderStyle.Success
                });
        }
        await DialogDelete.HideAsync();
    }
    private void AddToast()
    {
        ToastNotificationService.ShowToast(new ToastOptions
            {
                ProviderName = "Customization",
                Title = "System Warning",
                Text = "សូមអភ័យទោស Serial Number របស់លោកអ្នកមានរួចទៅហើយ",
                ThemeMode = ToastThemeMode.Pastel,
                RenderStyle = ToastRenderStyle.Warning

            });
    }
    private void ConfirmDeleteNo()
    {
        DialogDelete.HideAsync();
    }

    private void CloseDialogNoRecordSelected()
    {
        DialogNoRecordSelected.HideAsync();
    }

    private void ShowItemDetails(Repairs item)
    {
        // Show item details logic
    }

    private async Task ConfirmDelete(Guid id)
    {
        selectedItemId = id;
        await DialogDelete.ShowAsync();
    }

}


