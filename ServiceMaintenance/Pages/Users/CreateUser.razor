@page "/users/create"
@inject UserService UserService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<h3>Create New User</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="newUser" OnValidSubmit="OnCreateUser">
    <div class="form-group">
        <label for="FirstName">First Name</label>
        <InputText id="FirstName" @bind-Value="newUser.FirstName" class="form-control" />
    </div>
    <div class="form-group">
        <label for="LastName">Last Name</label>
        <InputText id="LastName" @bind-Value="newUser.LastName" class="form-control" />
    </div>
    <div class="form-group">
        <label for="UserName">Username</label>
        <InputText id="UserName" @bind-Value="newUser.UserName" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Email">Email</label>
        <InputText id="Email" @bind-Value="newUser.Email" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Password">Password</label>
        <InputText id="Password" @bind-Value="newUser.Password" type="password" class="form-control" />
    </div>
    <div class="form-group">
        <label for="ConfirmPassword">Confirm Password</label>
        <InputText id="ConfirmPassword" @bind-Value="newUser.ConfirmPassword" type="password" class="form-control" />
    </div>

    <div class="form-group">
        <label>Roles</label>
        @foreach (var role in availableRoles)
        {
            <div class="form-check m-1">
                <input @bind="role.IsSelected" class="form-check-input" type="checkbox" />
                <label class="form-check-label">
                    @role.DisplayValue
                </label>
            </div>
        }
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
    <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
</EditForm>

@code {
    private UserViewModel newUser = new UserViewModel();
    private List<CheckBoxViewModel> availableRoles = new List<CheckBoxViewModel>();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        availableRoles = await UserService.GetAllRolesAsync(); // Fetch all available roles
    }

    private async Task OnCreateUser()
    {
        if (newUser.Password != newUser.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        newUser.Roles = availableRoles
            .Where(role => role.IsSelected)
            .Select(role => role.DisplayValue)
            .ToList();

        var result = await UserService.CreateUserAsync(newUser);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/users");
        }
        else
        {
            errorMessage = string.Join("; ", result.Errors.Select(e => e.Description));
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/users");
    }
}
