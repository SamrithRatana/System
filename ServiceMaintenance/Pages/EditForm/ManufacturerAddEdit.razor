@page "/ManufacturerAddEdit/{Manufacturerid:int}"
@using ServiceMaintenance.Models
@using ServiceMaintenance.Services
@inject IManufacturerService ManufacturerService
@inject NavigationManager NavigationManager
@using Syncfusion.Blazor

<h1>@pagetitle</h1>

<SfDialog IsModal="true" Width="500px" ShowCloseIcon="true" Visible="true">
    <DialogTemplates>
        <Header>
            <div class="dialog-header">
                <h2>Form</h2>
            </div>
        </Header>
    </DialogTemplates>

    <EditForm Model="@manufacturer" OnValidSubmit="@SaveManufacturer">
        <div class="form-group">
            <h2 class="image-title">Logo Upload</h2>
            <div class="image-container">
                @if (!string.IsNullOrEmpty(manufacturer.Logo))
                {
                    <img src="@manufacturer.Logo" alt="Manufacturer Logo" />
                    <div class="image-filename">@Path.GetFileName(manufacturer.Logo)</div>
                }
                else
                {
                    <img src="images/default-image.jpg" alt="Default Logo" class="default-image" />
                    <p>No logo available. <br />Upload or browse an image.</p>
                }

                <div class="file-upload-overlay">
                    <InputFile OnChange="HandleFileSelected" />
                    <label for="file-upload" class="file-upload-label">Choose File</label>
                </div>
            </div>

            <SfTextBox Enabled="false" Placeholder="Logo File Name" FloatLabelType="@FloatLabelType.Always" Value="@Path.GetFileName(manufacturer.Logo)"></SfTextBox>
            <SfTextBox Enabled="true" Placeholder="Type" FloatLabelType="@FloatLabelType.Always" @bind-Value="manufacturer.Type"></SfTextBox>
            <SfTextBox Enabled="true" Placeholder="Name" FloatLabelType="@FloatLabelType.Always" @bind-Value="manufacturer.Name"></SfTextBox>
            <SfTextBox Enabled="true" Placeholder="Description" FloatLabelType="@FloatLabelType.Always" @bind-Value="manufacturer.Description"></SfTextBox>
        </div>

        <div class="e-footer-content">
            <div class="button-container">
                <button type="submit" class="e-btn e-normal e-primary">Save</button>
                <button type="button" class="e-btn e-normal" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </EditForm>
</SfDialog>

@code {
    Manufacturer manufacturer = new Manufacturer();
    public string pagetitle = "Add a Manufacturer";
    [Parameter]
    public int Manufacturerid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Manufacturerid == 0)
            {
                pagetitle = "Add a Manufacturer";
            }
            else
            {
                pagetitle = "Edit Manufacturer";
                manufacturer = await ManufacturerService.GetData(Manufacturerid);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error initializing: {ex.Message}");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var uploadsFolder = Path.Combine("wwwroot", "images", "manufacturers");
            var uniqueFileName = Guid.NewGuid().ToString() + "_" + file.Name;
            var filePath = Path.Combine(uploadsFolder, uniqueFileName);

            if (!Directory.Exists(uploadsFolder))
            {
                Directory.CreateDirectory(uploadsFolder);
            }

            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(stream);
            }

            manufacturer.Logo = Path.Combine("images", "manufacturers", uniqueFileName).Replace("\\", "/");
        }
    }

    protected async Task SaveManufacturer()
    {
        if (Manufacturerid == 0)
        {
            await ManufacturerService.CreateData(manufacturer);
        }
        else
        {
            await ManufacturerService.UpdateData(manufacturer);
        }
        NavigationManager.NavigateTo("/manufacturer");
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/manufacturer");
    }
}

<style>
    .form-group {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
    }

    .image-container {
        grid-column: span 2;
        position: relative;
        text-align: center;
    }

        .image-container img {
            max-width: 60%;
            height: auto;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .image-filename {
        position: absolute;
        bottom: 8px;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 5px 10px;
        border-radius: 5px;
        opacity: 0;
        transition: opacity 0.3s ease;
        pointer-events: none;
    }

    .image-container:hover .image-filename {
        opacity: 1;
    }

    .default-image {
        max-width: 100%;
        height: auto;
        border: 2px dashed #ccc;
        border-radius: 8px;
        padding: 1rem;
    }

    .file-upload-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

        .file-upload-overlay input[type="file"] {
            width: 100%;
            height: 100%;
            cursor: pointer;
            opacity: 0;
        }

        .file-upload-overlay:hover {
            opacity: 1;
            background: rgba(0, 0, 0, 0.4);
        }

    .file-upload-label {
        color: white;
        background-color: rgba(0, 0, 0, 0.5);
        padding: 0.5rem 1rem;
        border-radius: 5px;
        cursor: pointer;
    }

    .e-footer-content {
        grid-column: span 2;
        display: flex;
        justify-content: flex-end;
        margin-top: 1rem;
    }

    .button-container {
        display: flex;
        gap: 0.5rem;
    }
</style>